1.数据库通常是一个或者一组文件，保存了一些符合规定的数据，简称DB（DataBase），数据库软件称为数据库管理系统，简称DBMS（DataBase
Management System）

3.表是一种结构化的文件，可以用来存储特定类型的数据，表都有特定的名称且不能重复，表中有以下概念：列（通常叫做字段，包含字段名称、字段
数据类型、字段约束、字段数据长度），行（通常叫做表中的记录，表中的数据是按行存储的，可以有0到多条记录），主键（由列构成，表中的每一
行通常都有一个标识，主键可以由一个（单一主键）或多个字段（复合主键）构成，主键一般不能修改）

4.SQL分类：1） 数据库查询语言DQL（Data Query Language），代表关键词select；2） 数据库操作语言DML（Data Manipulation Language）
代表关键词insert（增）、delete（删）、update（改），对表中的数据；3） 数据库定义语言DDL（Data Definition Language），代表关键词
create（创建）、drop（删除）、alter（修改），对表结构；4） 事务控制语言TCL（Transactional Control Language），代表关键词commit、
rollback；5） 数据控制语言DCL（Data Control Language），代表关键词grant、revoke


(1)常用命令
启动MYSQL服务：net start mysql ,停止MYSQL服务：net stop mysql ,登录MYSQL：mysql -u用户名 -p登陆密码
查看MYSQL版本：登录MYSQL前 mysql --version 或 mysql -V（V大写），登录MYSQL之后：select version();
终止一条语句：\c, |MYSQL退出登录：exit、\q或者Ctrl+c
查看现有的数据库：show databases; |创建数据库：create database 数据库名称; |指定当前缺省数据库：use 数据库名;
查看当前使用数据库： select database(); |查看当前数据库中的表：show tables; |看看其它数据库中的表：show tables from 数据库名;
查看表结构：desc 表名称; |查看表的创建语句：show create table 表名称;（DEFAULT CHARSET=utf8表示数据库字符编码为UTF-8）
查看变量：show variables like '%char%'; |设置结果编码集（叧对当前窗口有效）：set character_set_results = 'GBK';
查询sql语句的执行计划：语法，select语句前面加explain 如：explain select ename,sal from emp where sal=5000;


(2)简单查询
1.查询一个字段：select 字段名 from 表名;(注：在SQL语句中丌区分大小写；SQL语句以“；”分号结束）

2.查询多个字段：select 字段名,字段名 from 表名;（注：多个字段查询时，字段不字段之间用“,”隔开）


3.查询全部字段：select * from 表名;（注：采用select * from 表名;，虽然简单，但是 * 号不是很明确，并且 select * 语句会先去编译，
将*转换成字段，建议查询全部字段将相关字段写到 select 语句的后面，在以后 java 连接数据库的时候，是需要在 java 程序中编写 SQL 语句
的，这个时候编写SQL语句不建议使用 select * 这种形式，建议写明字段，这个 SQL 语句的可读性强）

4.列出员工的编号，姓名和年薪：select empno,ename,sal*12 from emp;（注：字段上可以使用数学表达式只要SQL语句中有select关键字，不
会修改底层数据库字段的值；）

5.将查询出来的字段重命名：select empno,ename,sal * 12 as yearsal from emp;或select empno,ename,sal * 12 yearsal from emp;
重命名为中文：select empno,ename,sal * 12 as '年薪' from emp;或者select empno,ename,sal * 12 '年薪' from emp;（注：标准SQL
询句中类型为字符串时必须加单引号，加单引号适用于任何数据库）


(3)条件查询
1.查询薪水为5000的员工：select empno,ename,sal from emp where sal = 5000;

2.查询job为MANAGER的员工：select empno,ename,job from emp where job ='manager';
注意：MySQL在windows下是不区分大小写的，将script文件导入MySQL后表名也会自动转化为小写，结果再想将数据库导出放到linux服务器中使用
时就出错了。因为在linux下表名区分大小写而找不到表，查了很资料都说在linux下更改MySQL配置使其也丌区分大小写，但是有没有办法反过来让
windows下大小写敏感呢？其实方法是一样的，相应的更改windows中MySQL的设置就行了。具体操作：在MySQL的配置文件my.ini中增加一行：
lower_case_table_names = 0其中 0：区分大小写 ； 1：不区分大小写
MySQL在Linux下数据库名、表名、列名、别名大小写规则是这样的：数据库名不表名是严格区分大小写的；表的别名是严格区分大小写的；
列名不列的别名在所有的情况下均是忽略大小写的；变量名也是严格区分大小写的；（MySQL的变量名在windows下都不区分大小写）

3.查询薪水不等于5000的员工：select empno,ename,sal from emp where sal <> 5000;或者select empno,ename,sal from emp where
sal != 5000;数值也可以采用单引号引起来，原因是MYSQL数据库会进行自动类型转换，但是不建议用

4.查询薪水为1600到3000的员工：1）select empno,ename,sal from emp where sal >= 1600 and sal <= 3000;2）select empno,ename,
sal from emp where sal between 1600 and 3000;（注：关亍between … and … 它是包含最大值和最小值的，用在字符上区间为：前闭后开）

5.查询津贴为空的员工：select empno,ename,comm from emp where comm is null;（Null 为空，它不是一个数值，不是一个空串，为null
可以设置这个字段不填值，如果查询为null的字段，采用is null。）

6.查询津贴不为空的员工：select empno,ename,comm from emp where comm is not null;

7. 查询工作岗位为'MANAGER'并且薪水大于2500的员工：select empno,ename,job,sal from emp where job ='MANAGER' and sal > 2500;

8.查询出job为SALESMAN和job为MANAGER的员工：select ename,job from emp where job = 'SALESMAN'or job = 'MANAGER';

9.查询薪水大于1800，并且部门编号为20或30的员工：select ename from emp where sal>1800 and (deptno=20 or deptno=30);（注意：
and的优先级要高于or，关亍运算符的问题不用死记硬背，没有把握的尽量采用括号；）

10.查询出Job为SALESMAN和Job为MANAGER的员工：select ename,job from emp where job in ('SALESMAN','MANAGER');

11.查询出薪水不是1600和3000的员工：select ename,sal from emp where sal not in(3000,1600);或者：select ename,sal from emp
where sal <> 1600 and sal <> 3000;或者select ename,sal from emp where not (sal = 1600 or sal = 3000);

12.模糊查询(like):select ename from emp where ename like 'M%';（姓名以M开头的所有员工）| select ename from emp where ename
like '%N';（姓名以N结尾的所有员工）| select ename from emp where ename like '%O%';（姓名中包含O的所有员工）| select ename
from emp where ename like '_A%';（姓名中第二个字符为A的所有员工）| select ename from emp where ename like '%E_';（姓名中倒数
第二个字符为E的所有员工）| select ename from emp where ename like '__R%';（姓名中第三个字符为N的所有员工姓名）| （注：like可以
实现模糊查询，like支持%（表示任意多个字符）和下划线_（表示任意字符）匹配）

13.排序（排序采用order by子句，order by后面跟上排序字段，排序字段可以放多个，多个采用逗号间隔，order by默认采用升序（asc），如果
存在where子句，那么order by必须放到where语句后面。）：select ename,sal from emp order by sal;（按照薪水由小到大排序（系统默认
由小到大））| select ename,job,sal from emp where job = 'MANAGER'order by sal;（取job为MANAGER的员工，按薪水由小到大排序）|
手动指定按照薪水由小到大排序（升序关键字asc）：select ename,sal from emp order by sal asc;
手动指定按照薪水由大到小排序（降序关键字desc）：select ename,sal from emp order by sal desc;
多个字段排序（如果采用多个字段排序，如果根据第一个字段排序重复了，会根据第二个字段排序）：
按照job和薪水倒序排序： select job,sal from emp order by job desc,sal desc;
使用字段位置排序（不建议采用此方法，采用数字含义不明确，可读性不强，程序不健壮）：
按照薪水升序排序：select * from emp order by 6;（薪水sal在第6个字段）


(4)处理函数
1.数据处理函数/单行处理函数（指输入一行，输出一行）：例子，计算每个员工的年薪（含补助）：select ename,(sal+comm)*12 as yearsal
 from emp;这样不行，因为（这样不行，因为重点：所有数据库都是这样规定的只要有null参与的运算结果一定是null）修改如下：select ename,
 (sal+ifnull(comm,0))*12 as yearsal from emp;(ifnull(可能为null的数据,被当作什么处理))

2.分组凼数/聚合凼数/多行处理凼数（指输入多行，输出一行），有（sum求和，avg取平均，max取最大值，min取最小值，count取得记录数）
注意：1.分组函数自动忽略空值，不需要手动排除空值，例子：select count(comm) from emp;(统计comm字段中不为null的数据总数量)，知识点
count(*)统计总记录条数；count(字段名)统计字段中不为null的数据总数量取得总共薪水（工资+补助）合计：错误，select sum(sal+comm)
from emp;sum求和前会先进行括号内的运算而comm字段有null值，叧要有null参不的数学运算结果都为null，而sum会自动忽略null值，修改如下
select sum(sal+ifnull(comm,0)) from emp; 2.分组函数一般都会和group by联合使用，这也是它被叫做分组函数的原因，并且任何一个分组函
数都是在group by语句执行结束之后才会执行的，当sql语句中没有group by时，整张表的数据自成一组，而group by语句是在where语句执行之后
才会执行的，所以分组函数不能直接使用在where子句当中（由于此时并没有分组），例子，统计工资高于平均工资的员工：错误，select ename,
sal from emp where sal>avg(sal);不能这么写，修改如下 select ename,sal from emp where sal>(select avg(sal) from emp);使用
了子查询  3.当一条语句中有group by的话，select后面只能跟分组函数和参与分组的字段，例子，select ename,max(sal),job from emp
group by job;该语句在mysql中能执行但是结果没有意义，在oracle中直接报错，语法错误，oracle语法更严谨  4.分组凼数可以都放到select中
一起使用，例子，select count(*),sum(sal),avg(sal),max(sal),min(sal) from emp;

3.distinct去除重复记录: distinct字段名A：去除不字段名A相同的记录，distinct 字段名A,字段名B：去除字段名A和字段名B同时相同的记录（
注意：distinct只能出现在所有字段最前面，后面如果有多个字段及为多字段联合去重）例子，查询公司有哪些工作岗位：select distinct job
from emp; 查询公司工作岗位数量：select count(distinct job) from emp; 去除部门编号deptno和岗位job重复的记录:select distinct
deptno,job from emp;

4.分组查询：group by 字段名称; 注意：1.有group by的DQL语句中，select语句后面只能跟分组函数和参与分组的字段，例子，select ename,
max(sal),job from emp group by job;该语句在mysql中能执行但是结果没有意义，在oracle中直接报错，语法错误，oracle语法更严谨；2.如
果使用了order by，order by必须放到group by后面；3.分组函数不能使用在where语句当中，where在group by之前过滤，having在group by之
后过滤所以不能通过where过滤，可以采用having过滤含分组函数的字段（having必须和group by联用不能单独出现），采用where过滤效率较高
（where是分组之前过滤，过滤之后数据就变少了，后面执行效率提高），能用where尽量用where，例子：找出最大薪资大于2900的部门编号：
select deptno,max(sal) from emp group by deptno having max(sal)>2900;效率较低，改进如下：select deptno,max(sal) from emp
where sal>2900 group by deptno;4.多字段分组，会先根据第一个字段分组然后再是第二个字段，例子，找出每个部门不同工作岗位的最高薪资：
select deptno,job,max(sal) from emp group by deptno,job;(先根据deptno分，然后job，换个位置结果顺序不同)


(5)连接查询/跨表查询
1.在实际开发中，数据往往不是存放储一张表中，而是同时存储在多张表中，这些表与表存在着关系，我们在检索数据的时候往往需要多张表联合起来
检索，这种多表联合检索被称为连表查询或跨表查询（笛卡尔积现象：若两张表进行连接查询的时候没有任何条件限制，最终的查询结果总数是两张表
记录的乘积，该现象称为笛卡尔积现象,例子，显示每个员工信息并显示所属部门名称：select e.ename,d.dname from emp e,dept d;）

2.连接查询根据年代分类:1.SQL92语法（select xxxx from A表名,B表名 where 表连接条件 and 数据查询条件;）例子，查询每一个员工所在的
部门名称，要求最终显示员工姓名和对应的部门名称：select e.ename,d.dname from emp e,dept d where e.deptno=d.deptno;缺点是表连接
条件与查询条件放在一起没有分离 2.SQL99语法（select xxxx from A表名 join B表名 on 表的连接条件;）例子，查询每一个员工所在的部门名
称，要求最终显示员工姓名和对应的部门名称：select e.ename,d.dname from emp e join dept d on e.deptno=d.deptno;这种方式比较好，
表连接独立，结构清晰，如果结果数据不满足要求，可再追加where条件进行过滤；

3.连接查询根据连接方式分类：1.内连接（只连接匹配的行，即A表与B表相连接，能够匹配的记录查询出来），1)等值连接，例子，查询员工名称和
员工所对应的部门名称：select e.ename,d.dname from emp e inner join dept d on d.deptno=e.deptno;(inner可忽略)，2)非等值连接，
例子,查询员工的工资等级:select e.ename,s.grade from emp e join salgrade s on e.sal between s.losal and s.hisal;3)自连接，
例子，查询员工的名称和员工对应的领导名称：select a.ename '员工',b.ename '领导' from emp a join emp b on a.mgr=b.empno;
2.外连接（A表和B表能够完全匹配的记录查询出来之外，将其中一张表（主表）的记录无条件的完全查询出来，对方表（副表）没有匹配的记录时，
会自动模拟出null值与之匹配；），分为左外连接（包含左边表的全部行和右边表中全部匹配的行）和右外连接（包含右边表的全部行和左边表中全
部匹配的行），可以相互转化，例子1，找出每一个员工对应的部门名称，要求部门名称全部显示（左/右外连接）：select e.ename,d.dname from
dept d left outer join emp e on d.deptno=e.deptno;(左连接,其中outer可以省略，因为区分内连接与外连接不是依靠这两个关键字，而是
看SQL语句中的left/right关键字)，select e.ename,d.dname from emp e right join dept d on d.deptno=e.deptno;(右连接)，例子2，
找出每一个员工对应的领导名，要求显示所有员工：select a.ename,b.ename from emp a left join emp b on a.mgr=b.empno;例子3（多表）
找出每一个员工对应的部门名称，以及该员工对应的工资等级，要求显示员工姓名、部门名称、工资等级：select e.ename,d.dname,s.grade from
emp e join dept d on e.deptno=d.deptno join salgrade s on e.sal between s.losal and s.hisal;(原理：A表和B表通过连接条件1连
接之后，A表再和C表通过连接条件2进行连接)


(6)子查询
定义：select语句嵌套select语句被称为子查询，select子句可出现在select、from、where关键字后面

1.where后：例子，找出薪水比公司平均薪水高的员工，要求显示员工名和薪水：select ename,sal from emp where sal>(select avg(sal)
from emp);

2.from后：例子，找出每个部门的平均薪水，并且要求显示平均薪水的薪水等级：select e.deptno,e.avgs,s.grade from (select deptno,
avg(sal) as avgs from emp group by deptno) e join salgrade s on e.avgs between s.losal and s.hisal order by deptno;

3.select后（了解）：select e.ename,(select d.dname from dept d where e.deptno = d.deptno) as dname from emp e;


(7)union合并(相加)集合
定义：将查询结果集合并，合并结果集的时候，查询字段个数必须相同,查询字段类型在MySQL中不必完全相同，但是Oracle中一定要类型也相同
例子1，查询出job为MANAGER和SALESMAN的员工：select ename,job from emp where job='MANAGER' union select ename,job from emp
where job='SALESMAN';
例子2，查询包含MANAGER和SALESMAN的员工信息：1)select * from emp where job='MANAGER' or job='SALESMAN';2)select * from emp
where job in('MANAGER','SALESMAN');3)select * from emp where job='MANAGER' union select * from emp where job='SALESMAN';


(8)limit使用
作用：（只在MySQL中起作用）获取一表前几条或中间某几行数据，语法：limit起始下标m（默认从0开始）,长度n,limit是sql语句最后执行的环节
例子1，取前五个员工信息：1)select * from emp limit 0,5; 2)select * from emp limit 5;
例子2，取出工资排行在前5的员工信息：select * from emp order by sal desc limit 5;
例子3,找出工资排名在[3-9]的员工信息:select * from emp order by sal desc limit 2,7;
MySQL中通用的分页SQL语句:由于第pageNo页：(pageNo – 1) * pageSize，pageSize， select 查询信息 from 表名 order by 升降序 limit
(pageNo – 1) * pageSize,pageSize;


(9)操作表
1.创建语法：create table 表名(字段名 类型(长度) 约束,字段名 类型(长度) 约束,字段名 类型(长度) 约束,...);

2.常用数据类型：int 整数型（java中的int）、bigint 长整型（java中的long）、float 浮点型（Java的float double）、char 定长字符串
（String）、varchar 可变长度字符串（StringBuffer/StringBuilder）、date 日期类型（对应Java中的java.sql.Date类型)、BLOB 二进制
大对象（Binary Large Object，专门存储图片、视频、声音等数据，对应java中的Object）、CLOB（Character Large Object，可储存超大文
本，对应java中的Object）

3.char和varchar选择：在实际开发中当某个字段长度不发生改变时用char（性别、生日），当一个字段长度不确定时使用varchar（简介、姓名）
char不需要动态分配空间，所以执行效率高，但是可能会导致空间浪费，varchar比较智能，可以根据实际的数据长度分配空间，比较节省空间，但
在分配的时候需要相关判断，效率低。

4.创建表：例子，创建表格<t_student 学生信息表>(学生信息包括：学号 no int(10),名字 name varchar(32),性别 sex char(1))：
create table t_student(no int(10),name varchar(32),sex char(1));创建表格时给字段设置默认值:default 默认值,演示如下
（no int(10) default 0,...） 注意：1)表格名称最好以 t_或tbl_开始，增强可读性 2)varchar长度最好是2的倍数，方便存储中文

5.删除表格：1)drop table t_student;如果数据库中没有该表则会报错 2)drop table if exists t_student;最好采用这种方式删除表格，但
这是MySQL特色其它数据库无法使用  3）删除大表：truncate table 表名;(速度快，但是表被截断，不可回滚，数据永久丢失)

6.向t_student表格中插入数据：语法(insert into 表名(字段名1,字段名2,...) values(值1,值2,...);)  1)insert into t_student(no,
name,sex)values(1,'zs','男');注意字段和数值必须一一对应，字段与数据个数必须相同，数据类型必须一致  2)插入部分数据，insert into
t_student(no)values(2);注意默认情况下，当表创建之后，没有指定约束也没指定默认值，系统默认值就是NULL，默认值NULL表示：若插入的时
候没有指定任何数据，默认插入NULL值  3)insert into t_student values(3,'ls','男');注意不建议将前面的字段省略，若省略就表示要将表
中所有字段必须赋值，并且程序不健壮，若修改表结构，将可能导致INSERT语句执行失败（每执行insert语句就会导致底层数据表中新增一条记录）

7.表的复制（将查询结果当作一张表创建）：语法 create table 表名 as select查询语句; 1)完全复制emp表到emp1：create table emp1 as
select * from emp; 2)选择性复制emp表到emp2:create table emp2 as select ename,sal from emp;

8.将查询结果插入到某张表中:语法 insert into 表名 select查询语句; 1)从emp2表中查询出员工工资为3000的，同时将查询结果插入emp2表中:
insert into emp2 select * from emp2 where sal=3000;

9.update修改数据:语法(update 表名 set 字段名=字段值，字段名=字段值 where 条件;没有条件整张表数据全部更新)  例子1，将no=2的name
修改为ok：update t_student set name='ok' where no=2; 例子2，将所有name改为lisi：update t_student set name='lisi';

10.删除数据：语法（delete from 表名 where 条件限制;注意：若没有条件限制，会将表中所有记录全部删除） 例子1，将t_student表中no为3
的学生删除：delete from t_student where no=3;  例子2，将 t_student 表中的数据全部删除：delete from t_student;


(10)约束
1.在创建表的时候可以给表的字段添加相应的约束，目的是为了保证表中数据的合法性、有效性、完整性，常见的约束有：
1)非空约束（not null）,not null约束的字段不能为null值，必须赋具体数据，如何添加：字段名 类型(长度) not null;只有列级约束

2)唯一性约束（unique）,unique约束的字段具有唯一性，不可重复,但是可以为null，如何添加：1.列级约束：字段名 类型(长度) unique; 2.表
级约束：unique(字段名); 3.用表记约束给多个字段添加约束：unique(字段名1,字段名2);表示字段名1和字段名2不能一起相同 4.组合使用 not
null和unique：字段名 类型(长度) not null unique;表示该字段即不能为null 也不能重复

3)主键约束PK（primary key），primary key约束的字段不能为null，也不能重复一表一个，某字段添加主键之后就叫主键字段，该字段中每一个
值为主键值，表设计三范式第一范式要求任何一张表都要有主键，主键值是这行记录在这表中的唯一标识（像一个人的身份证号），主键分类：按数量
分类：1.单一主键（给一个字段添加主键约束，推荐常用）列级约束：字段名 类型(长度) primary key; 表级约束：primary key(字段名); 2.复
合主键（多个字段联合起来添加一个主键约束，不建议使用，违背三范式第二范式） 只能表级约束：primary key(字段名1,字段名2);表示字段名1
和字段名2不能一起相同且都不能为空 ,按主键性质分类：1.自然主键：主键值是和业务没有任何关系的自然数 2.业务主键：主键值和表中数据相关
（比如将银行卡的卡号作为主键），业务一旦发生改变主键值可能跟着改变，可能主键就重复了，所以业务主键使用较少   重点：一张表只能有一个
主键约束,mysql提供主键自增,从1开始，以1递增,如何使用：字段名 类型(长度) primary key auto_increment;

4)外键约束FK（foreign key）：foreign key约束的字段可以为null，也可以重复但是只能为被引用字段的字段值，一表可以有多个，被引用的
字段不一定是主键但是一定要有唯一性（unique）约束，外键根据个数分为：单一外键（给一个字段添加外键约束）、复合外键（给多个字段联合添
加一个外键），有了外键引用之后，表分为父表和子表，创建表时先创建父表再创建子表，删除表时先删除子表再删除父表，添加数据时先添加父表
再添加子表，删除数据时先删除子表再删除父表，如何使用：1.单一外键：foreign key(外键字段) reference 父表表名(被引用字段)，测试如下
**实例，设计数据库表用来存储学生和班级信息（给出两种解决方案），学生表 t_student包含：sno,sname,classno,cname，学生信息和班级信息
之间的关系：一个班级对应多个学生，典型的一对多关系：
1.第一种方案将学生信息和班级信息存储到同一张表中，这种方案会造成数据冗余，一个班级有很多个学生（每个学生对应一个班级，相同-->冗余）
2.第二种方案：将学生信息和班级信息分开两张表存储：学生表 + 班级表  1)创建t_student表和t_class表,t_student表要与t_class表有关系，
需要在t_student表中添加一个字段(这里选classno)做为外键字段，这个外键字段来引用t_class表中的一个字段（这里选cno），这样外键就建立
成功了，外键使外键值（classno）必须等于被引用字段的字段值（cno），正好为学生和班级之间的关系，写代码如下
create table t_class(cno int primary key,cname varchar(32));
create table t_student(sno int primary key,sname varchar(32),classno int,foreign key(classno) references t_class(cno));
insert into t_class values(100,'高三一班');insert into t_class values(200,'高三二班');
insert into t_class values(300,'高三三班');
insert into t_student values(1,'张三',100);insert into t_student values(2,'李四',200);
insert into t_student values(3,'王五',100);insert into t_student values(4,'赵六',300);
insert into t_student values(5,'李四',400);报错，400这个值在cno字段中没有


(11)存储引擎
存储引擎是MySQL特有的其他数据库没有，本质是通过采用不同的技术将数据存储在文件或内存中，每一种技术都有不同的存储机制提供不同的功能和
能力，通过选择不同的技术，可以获得额外的速度或功能，改善我们的应用

1.查看有哪些存储引擎:show engines\G ,在创建表时，在建表语句()后面添加engine=存储引擎;来指定存储引擎，如果没有指定择采用默认存储
引擎，默认存储引擎可在my.ini配置文件中用default-storage-engine选项指定，修改表的存储引擎使用：alter table 表名 engine=存储引擎
查看表使用的存储引擎：show create table emp\G;

2.常用存储引擎：
1)MYISAM存储引擎:mysql最常用的存储引擎，但不是默认的，通过三个文件组织一张表：格式文件—存储表的结构（mytable.frm）,数据文件—存储
表的数据（mytable.MYD）,索引文件—存储表的索引（mytable.MYI）,优点：由于是文件可被压缩节省存储空间，并且可以转换为只读表提高检索效
率，缺点是不支持事务
2)InnoDB存储引擎（默认）：表结构存储在.frm格式文件中，数据存储在tablespace这样的表空间中（逻辑概念），提供一组用来记录事务性活动的
日志文件，优点是在MySQL崩溃之后提供自动恢复机制，支持事务（用commit（提交）、savepont及rollback（回滚））、行级锁、外键等，安全得
到保障，支持级联删除和级联更新，缺点是无法被压缩和转换成只读
3)MEMORY存储引擎：表结构存储在.frm格式文件中，表数据及索引被存储在内存中，字段属性不能包含TEXT或BLOB字段，以前前被称为HEAP引擎，
优点由于数据存储在内存中，且行的长度固定，所以速度非常快，缺点是不支持事务，数据容易丢失
选择合适的存储引擎：MYISAM表最适合于大量的数据读而少量数据更新的混合操作。MyISAM表的另一种适用情形是使用压缩的只读表。如果查询中包
含较多的数据更新操作，应使用InnoDB。其行级锁机制和多版本的支持为数据读取和更新的混合提供了良好的并发机制。使用MEMORY存储引擎存储非
永久需要的数据，或者是能够从基于磁盘的表中重新生成的数据。


(12)事务（Transaction）
事务是一个完整的业务逻辑单元不可再分（如银行转账业务，必须同时成功或失败），而一个完整业务需要批量的DML（insert、update、delete）
语句共同完成（一条DML语句不需要事务），想保证两条及以上DML语句同时成功或失败就需要用到事务，事务只和DML语句有关系，或者说只有DML语
句才有事务，因为这三条语句都是和数据库表中的数据相关的，事务的存在是为了保证数据的完整性和安全性，事务四大特征（ACID）：1） 原子性
（Atomicity）最小单元不可再分，2） 一致性（Consistency）事务要求所有的DML语句操作的时候，必须保证同时成功或同时失败，3） 隔离性
（Isolation）事务A和事务B之间有隔离，4） 持久性（Durability）持久性说的是最终数据必须持久化到硬盘文件当中事务才算完整的结束

1.开启事务：MySQL事务默认情况下是自动提交的（show variables like '%commit%';可以查看），也就是说，只要执行一条DML语句，就开启了
事务，并且提交了事务，任何一条DML语句执行，标志事务的开启，提交（commit;）或者回滚（rollback;）之后事务结束
1)手动开启事务：start transaction;（会关闭自动提交） ，2)提交事务:commit; （成功的结束，将所有的DML语句操作记录和底层硬盘文件中
数据进行一次同步），3)回滚事务:rollback;（失败的结束，将所有DML诧句操作记录全部清空）   ***重点： 在事务进行过程中，未结束之前，
DML语句是不会修改底层数据库文件中的数据。只是将历史操作记录一下，在内存中完成记录。只有在事务结束时，而且是成功结束的时候才会修改底
层硬盘文件中的数据。

2.关闭/开启MySQL事务自动提交（只对当前会话有效），开启：set autocommit = off;(或set session autocommit = off;)，关闭：set
autocommit = on;（或set session autocommit = on;)，查询事务状态：show variables like '%commit%';

3.事务的隔离级别：
1)读未提交（read uncommitted）：事务A和事务B，事务A还没有提交，事务B能读取事务A未提交的数据，这里读取到的数据可以叫做脏数据或脏读
2)读已提交（read committed）：事务A和事务B，事务A提交的数据，事务B才可读取到，解决了脏读现象，但是不可重复读取，因为事务A修改数据
并提交后事务B中的数据也跟着改变了，再次读取就不是之前的数据了（Oracle数据库管理系统默认隔离级别为这种级别）
3)可重复读（repeatable read）：事务A和事务B，事务A提交之后后的数据，事务B也读取不到，解决了脏读和不可重复读取问题，但是这种隔离级
别读取到的数据是幻象（mysql数据库管理系统默认隔离级别为这种级别）
4)序列化/串行化读（serializable）：事务A和事务B，事务A在操作数据库表中数据的时候，事务B只能排队等，解决了所有问题（每一次读取都是
数据表中真实的记录），但一般很少使用因为吞吐量太低用户体验不好，事务A和事务B不再并发；

4.查看/设置事务的隔离级别，查看当前会话：select @@tx_isolation;（或select @@session.tx_isolation;） ，查看全局隔离级别等级：
select @@global.tx_isolation;  设置隔离级别范围，会话级（session）只对当前会话有效：set transaction isolation level 隔离级别;
全局级（global）：对所有会话有效：set global transaction isolation level 隔离级别;

5.悲观锁（行级锁）：事务A和事务B，事务A使用悲观锁锁住某行之后（select语句的执行结果），事务B将无法对该行进行修改，直到事务A结束
* 语法：select语句后面加 for update

6.乐观锁：支持并发，事务也不需要排队，只是需要一个版本号，原理：假如事务A和事务B同时对表中的某一行记录进行修改（修改之前先读版本号）
事务A先修改了，修改之后看了版本号为1，于是提交修改数据，并将版本号修改为2，这时事务B也修改了，准备提交的时候发现版本号是2，和它最初
读的版本号不一样，事务B回滚

(13)索引（index）
1.作用：相当于一本字典目录，提高程序的检索/查询效率；表中每一个字段都可添加索引（索引和表相同，都是一个对象，都存储在硬盘文件中）

2.数据库方面查询一张表有两种方式，第一种：全表扫描，第二种：根据索引检索（效率很高，原因是缩小了检索范围），检索虽然能提高效率，但是
不能随意添加索引，因为索引也是数据库中的对象，也需要数据库的不断维护，是有维护成本的，比如表中数据如果经常修改的话就不适合添加索引，
因为数据一旦改变，索引需要重新排序进行维护 添加索引是给表中的某一个字段或者某些字段添加索引
例子，select ename,sal from emp where ename='smith';若ename没有添加索引，那么通过ename过滤数据的时候，ename字段会全表扫描，扫
描ename字段中的所有值，当ename字段上上添加索引时，以上sql语句会根据索引扫描快速定位

3.创建/删除/查看索引，创建：create index 索引名 on 表名（字段名）;（或create unique index 索引名 on 表名（字段名）;添加unique
表示在该表中的该列添加一个唯一性约束），删除：drop index 索引名 on 表名; 查看：show index from 表名;  ***注意：主键和具有unique
约束的字段会自动添加索引，所以尽量通过它们检索（效率要高）

4.何时使用索引：1)数据量庞大的时候（根据客户的需求以及线上的环境），2)该字段很少的DML操作（由于索引也需要维护，DML操作多的话，也影
响检索效率），3)该字段经常出现在where条件中（经常根据字段查询）

5.查询sql语句的执行计划：语法，select语句前面加 explain ,例子，查询工资为5000的员工，没加索引： select ename,sal from emp
where sal=5000;(explain select ename,sal from emp where sal=5000;看出查询次数rows=14)，加索引：create index emp_sal_index
on emp(sal); 在查询：select ename,sal from emp where sal=5000;(explain select ename,sal from emp where sal=5000;看出查询
次数rows=1)  查看索引：show index from emp;  删除索引：drop index emp_sal_index on emp;

6.原理：索引底层采用了B+tree，通过B tree缩小扫描范围，底层索引进行了排序、分区，索引会携带记录在表中的物理地址，最终通过索引检索到
数据之后，获取关联的物理地址，通过物理地址定位表中的数据效率是最高的

7.索引分类：单一索引（给单个字段添加索引），复合索引（给多个字段联合起来加一个索引），主键索引（主键上会自动添加索引），唯一索引（
有unique约束的字段会自动添加索引）

8.模糊查询时如果第一个查询符用的%则索引失效


(14)视图（view）
1.视图在数据库管理系统中也是一个对象，也是以文件形式存在的，视图也对应了一个查询结果，叧是从不同的角度查看数据，还是同一张表

2.创建/删除/修改视图：创建，create view 视图名称 as 查询语句; 删除，drop view 视图名称;或者drop view if exists 视图名;（推荐）
修改：alter view 视图名称 as 查询语句;  ***注意：只有DQL语句才能以视图对象的方式创建出来，对视图进行增删改查会影响到原表数据，可以
对视图进行CRUD操作，通过视图操作从而起到隐藏表实际细节的作用

3.视图作用：
1)视图可以隐藏表的实际细节，保密级别较高的系统，数据库只对外提供相关的视图，java程序员只对试图进行CRUD（增查改删）操作
2)面向视图查询可以提高查询效率，例子，单独执行：select e.ename,d.dname from emp e join dept d on e.deptno = d.deptno; 将上面
执行结果当作视图对象创建：create view myview as select e.ename,d.dname from emp e join dept d on e.deptno = d.deptno; 面向
视图查询：没有进行表连接，提高检索效率：select * from myview;


(15)DBA命令
1.将数据库当中的数据导出：导出整个库，在windows的dos命令窗口执行：如 mysqldump bjpowernode>D:\bjpowernode.sql -uroot -p123
导出指定库下的指定表，在windows的dos命令窗口执行：如 mysqldump bjpowernode emp> D:\ bjpowernode.sql -uroot -p123 其中
bjpowernode表示要导出的数据库，D:\bjpowernode.sql表示导出到哪个位置，-uroot表示-u账户名，-p123表示-p账户密码

2.导入数据：登录MySQL数据库管理系统之后执行：create database bjpowernode;  use bjpowernode;  source D:\bjpowernode.sql;


(16)三范式
第一范式：任何一张表都应该有主键，并且每一个字段原子性不可再分
create table t_student(no int,name varchar(32),lianxi varchar(64));
insert into t_student values(1,'zs','123@,131');
insert into t_student values(2,'zs','124@,132');
insert into t_student values(1,'ww','125@,133');
以上不符合第一范式：1)数据存在重复记录，数据不唯一，没有主键  2)lianxi(联系方式包含email和电话)可以再分，没有原子性，修改如下
create table t_student(no int primary key,name varchar(32),email varchar(32),tel int);
insert into t_student values(1,'zs','123@','131');
insert into t_student values(2,'zs','124@','132');
insert into t_student values(3,'ww','125@','133');

第二范式：建立在第一范式的基础之上，所有非主键字段完全依赖主键，不能产生部份依赖（严格意义上说：尽量不要使用联合主键）
create table t_student(sno int,tno int,sname varchar(32),tname varchar(32),primary key(sno,tno));
insert into t_student values(101,1,'zs','w');
insert into t_student values(102,2,'ls','z');
insert into t_student values(103,1,'ww','w');
insert into t_student values(101,2,'zs','z');
以上虽然符合第一范式但是此表会出现大量冗余（sname,tname），出现冗余的原因是产生了部份依赖，sname部份依赖主键的一个字段sno，tname
部份依赖了主键的另一字段tno，修改如下（多对多，三张表，关系表加两个外键）
create table t_student(sno int primary key,sname varchar(32));
create table t_teacher(tno int primary key,tname varchar(32));
create table t_guanxi(sno int,tno int,primary key(sno,tno),foreign key(sno) references t_student(sno),foreign key(tno)
references t_teacher(tno));
insert into t_student (sno,sname)values(101,'zs'),(102,'ls'),(103,'ww');
insert into t_teacher (tno,tname)values(1,'w'),(2,'z');
insert into t_guanxi (sno,tno) values(101,1),(102,2),(103,1),(101,2);

第三范式：建立在第二范式的基础之上，所有非主键字段直接依赖主键，不能产生传递依赖
create table t_s(sno int primary key,sname varchar(32),cno int,cname varchar(32));
insert into t_s(sno,sname,cno,cname) values (101,'zs',1,'高三一班'),(102,'ls',2,'高三二班'),(103,'ww',3,'高三三班'),(104,
'zl',3,'高三三班');
以上cname字段存在冗余，因为cname字段没有直接依赖于主键，依赖于cno，cno依赖于主键sno，这就是传递依赖，修改如下（一对多，两张表，多
的表加外键）
create table t_c(cno int primary key,cname varchar(32));
create table t_s(sno int primary key,sname varchar(32),cno int, foreign key(cno) references t_c(cno));
insert into t_c(cno,cname)values(1,'高三一班'),(2,'高三二班'),(3,'高三三班');
insert into t_s(sno,sname,cno)values(101,'zs',1),(102,'ls',2),(103,'ww',3),(104,'zl',3);
提醒：在实际开发中，为了满足客户的需求为主，有的时候会拿冗余换执行速度（多表执行sql语句速度较慢）

三范式总结：
1)一对一：第一种方案，主键共享（分为两张表原因是可能表信息量太大，分开存储），例子如下
用户登陆表：（只需要账号和密码不用查看用户详细信息，可以把表分为两张）
create table t_user_login(id int primary key auto_increment,username varchar(32),password varchar(32));
用户详细信息表：
create table t_user_detail(id int primary key,realname varchar(32),tel int,foreign key(id) references t_user_login(id));
insert into t_user_login (username,password)values('zs','123'),('ls','456');
insert into t_user_detail(id,realname,tel)values(2,'李四',1385856),(1,'张三',1365856);
第二种方案，外键唯一
用户登陆表：
create table t_user_login(id int primary key auto_increment,username varchar(32),password varchar(32));
用户详细信息表：
create table t_user_detail(id int primary key auto_increment,realname varchar(32),tel int,userid int unique,foreign
key(userid) references t_user_login(id));
insert into t_user_login (username,password)values('zs','123'),('ls','456');
insert into t_user_detail(realname,tel,userid)values('李四',1385856,2),('张三',1365856,1);
2)一对多，两张表，多的表加外键（见第三范式）
3)多对多，三张表，关系表加两个外键（见第二范式）



